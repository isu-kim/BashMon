package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"log"
	"os"
	"time"
)

type bpfString struct {
	Data [128]int8
}

type context struct {
	pid            uint32
	ppid           uint32
	uid            uint32
	parentProcName string
	line           string
}

const (
	// The path to the ELF binary containing the function to trace.
	// On some distributions, the 'readline' function is provided by a
	// dynamically-linked library, so the path of the library will need
	// to be specified instead, e.g. /usr/lib/libreadline.so.8.
	// Use `ldd /bin/bash` to find these paths.
	rlSymbol = "readline"
	seSymbol = "shell_execve"
)

// attachUprobe attaches the uprobe for a symbol to a specific binary file
// Since returning noting will just delete ex and up which will remove the link, we are going to return both values.
func attachUprobe(objs bpfObjects, path string, symbol string) (*link.Executable, *link.Link) {
	// Open an ELF binary and read its symbols.
	log.Printf("Attached uprobe to %s:%s\n", path, symbol)
	ex, err := link.OpenExecutable(path)
	if err != nil {
		log.Printf("could not open executable: %s", err)
		return nil, nil
	}

	// Open an Uretprobe at the exit point of the symbol and attach
	// the pre-compiled eBPF program to it.
	up, err := ex.Uretprobe(symbol, objs.UretprobeBashReadline, nil)
	if err != nil {
		log.Printf("could not attach uretprobe: %s", err)
		return nil, nil
	}

	return ex, &up
}

// dockerRoutine checks if there are new bash files inside the containers regularly.
// If new /bin/bash files are found, this function will automatically attach uprobe to that one.
func dockerRoutine(objs bpfObjects, sigChan chan os.Signal, links []*link.Link, execs []*link.Executable, bashFiles []string) {
	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-sigChan
	}()

	// For storing inodes into the slice.
	var inodes []int
	inodes = []int{}

	// For all bash files, get inodes and store them.
	for _, file := range bashFiles {
		inode := retrieveInode(file)
		if inode != 0 && !intContains(inodes, inode) {
			ex, up := attachUprobe(objs, file, rlSymbol)
			execs = append(execs, ex)
			links = append(links, up)
			inodes = append(inodes, inode)
		}
	}

	for {
		tmp := retrieveDockerBinBash()
		// Iterate over all bash files listed before.
		// This is O(n^2) operation and needs to be optimized.
		for _, file := range tmp {
			fileInode := retrieveInode(file)
			if !intContains(inodes, fileInode) {
				log.Printf("Attached new file %s\n", file)
				ex, up := attachUprobe(objs, file, rlSymbol)
				execs = append(execs, ex)
				links = append(links, up)
				inodes = append(inodes, fileInode)
			}
		}
		time.Sleep(5 * time.Second)
	}
}

// uprobeReadLine will take care of all bash readline events.
func uprobeReadLine(objs bpfObjects, sigChan chan os.Signal) {
	// For storing Link and Executables for uprobe.
	var links []*link.Link
	var execs []*link.Executable
	links = []*link.Link{}
	execs = []*link.Executable{}

	// Initially retrieve all docker bin bash files.
	bashFiles := retrieveDockerBinBash()
	bashFiles = append(bashFiles, "/usr/bin/bash")

	// Start routine that checks Docker containers automatically forever.
	go dockerRoutine(objs, sigChan, links, execs, bashFiles)

	// Open a ringbuf reader from userspace RINGBUF map described in the eBPF C program.
	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %v\n", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit the read loop.
	go func() {
		<-sigChan
		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for bash readline events..")

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuffer event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		// Generate context based upon the ringbuffer event.
		ctx := context{
			pid:            event.Pid,
			ppid:           event.Ppid,
			uid:            event.Uid,
			parentProcName: getProcName(int(event.Ppid)),
			line:           convertString(event.Line[:]),
		}

		// If this was not user's command without any commands.
		if !isEmptyLine(ctx.line) {
			go handleContext(ctx)
		}
	}
}
